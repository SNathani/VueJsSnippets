<CodeSnippets >


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Scaffold an index file for rollup entries</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vindex</Shortcut>
            <Description>Code snippet to scaffold an index.js file contents</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="JavaScript"
                  Kind="file" Delimiter="^">
                <![CDATA[
  //Suggestion: File name should be index.js
  //imports
  import ClassName from './ClassName';
  //import ClassName2 from './ClassName2';
  
  //exports
   export  {
    ClassName
    //, ClassName2, ...
 }
 
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Scaffold a mixin</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vmixin</Shortcut>
            <Description>Code snippet to scaffold a mixin to be used in the component's mixins array</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the mixin for logging purposes</ToolTip>
                    <Default>mixin1</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript"
                  Kind="file" Delimiter="^">
                <![CDATA[
  //
  //Mixin Name: ^name^
  //
  
  //imports
  
  //exports
  export default {
    props: { 
        context: Object
      //TODO: declare common props
      ^end^
    },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false,
        hasInitialized: false
        
        //define common properties here ...
      }
    },
    computed: {
      //TODO: Common computed properties goes here ...
    },
    methods: {
      //TODO: Common methods goes here ...
    }
    
    /*
     , 
    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      this.isBusy = true;
      console.log("^name^.beforeCreate() ...");
    },
    created() {
      console.log("^name^.created() ...");
    },
    beforeMount() {
      console.log("^name^.beforeMount() ...");
    },
    mounted() {
      this.hasInitialized = true;
      console.log("^name^.mounted() ...");
    },
    beforeUpdate() {
      console.log("^name^.beforeUpdate() ...");
    },
    updated() {
      console.log("^name^.updated() ...");
    },
    activated() {
      console.log("^name^.activated() ...");      
    },
    deactivated(){
      console.log("^name^.deactivated() ...");
    }
    */
  }
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0">
        <Header>
            <Title>Scaffold a class</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vmodel</Shortcut>
            <Description>Code snippet to scaffold a model class</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the model class</ToolTip>
                    <Default>ClassName</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript"
                  Kind="file" Delimiter="^">
                <![CDATA[
  //
  //Model Class Name: ^name^
  //
  
  //imports
  
  //exports
   export default class ^name^ {
   constructor() {
     //this.name = null;
   }
 }
 
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <!--FILTER-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Create a global filter</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vfilg</Shortcut>
            <Description>Code snippet for a global filter</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the filter</ToolTip>
                    <Default>my-filter</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        Vue.filter('^name^', function (value) {
          if (!value) return '';
          let result = value;
          //TODO: transform value
          //result = ^end^;
          return result;
        });
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <!--DIRECTIVE-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Create a global custom directive</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vdirg</Shortcut>
            <Description>Code snippet for a global directive</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the directive</ToolTip>
                    <Default>my-directive</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        Vue.directive('^name^', {
          bind: function (el, binding, vnode, oldNode) {
           //Called only once, when the directive is first bound to the element. 
           //This is where you can do one-time setup work.
           ^end^
          },
          inserted: function (el, binding, vnode, oldNode) {
            //When the bound element is inserted into the DOM...
            
          },
          componentUpdated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode and the VNodes of 
            //its children have updated.
            
          },
          updated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode has updated, but possibly before its children have updated. 
            //The directive’s value may or may not have changed, 
            // but you can skip unnecessary updates by comparing the binding’s 
            // current and old values (see below on hook arguments).
          
          }
        });
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <!--DIRECTIVE FN-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Create a global custom directive - function shorthand</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vdirgfn</Shortcut>
            <Description>Code snippet for a global directive - function shorthand</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the directive</ToolTip>
                    <Default>my-directive</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        Vue.directive('^name^', function(el, binding, vnode, oldNode) {
            //TODO: Common functionality for bind and update hooks
            ^end^
        });
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Scaffold an instance method data</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vdata</Shortcut>
            <Description>Code snippet for data method</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[

    , data() {
      let vm = this;

      //public interface
      return {
        //define instance properties here ...
      }
    },^end^

]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <!--FILTER-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Create a local filter</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vfil</Shortcut>
            <Description>Code snippet for a local filter</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the filter</ToolTip>
                    <Default>my-filter</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
      filters: {
      ^name^: function (value) {
        if (!value) return '';
        let result = value;
        //TODO: Transform value
        //result = ^end^;
        return result;
      }
     }
]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <!--DIRECTIVE-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Create a local custom directive</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vdir</Shortcut>
            <Description>Code snippet for a local directive</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the directive</ToolTip>
                    <Default>my-directive</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[  
    directives: {
      ^name^: {
            bind: function (el, binding, vnode, oldNode) {
            //Called only once, when the directive is first bound to the element. 
            //This is where you can do one-time setup work.
            ^end^
            },
            inserted: function (el, binding, vnode, oldNode) {
            //When the bound element is inserted into the DOM...
            
            },
            componentUpdated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode and the VNodes of 
            //its children have updated.
            
            },
            updated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode has updated, but possibly before its children have updated. 
            //The directive’s value may or may not have changed, 
            // but you can skip unnecessary updates by comparing the binding’s 
            // current and old values (see below on hook arguments).
          
            }    
          }
    }
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <!--Version: 1.0.1-->

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>props property</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vprops</Shortcut>
            <Description>Code snippet for props property</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the prop</ToolTip>
                    <Default>context</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        props: { ^name^: Object },^end^]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Declare a props property</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vprop</Shortcut>
            <Description>Code snippet for props property declaration</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the prop</ToolTip>
                    <Default>context</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
                ^name^: Object ,
]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Declare a props property with full definition</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vpropfull</Shortcut>
            <Description>Code snippet for props property full declaration with validation</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the prop</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
 
              ^name^: {
                type: String, //[String, Number]
                required: true,
                default: function() {
                    return null;
                },
                validator: function(value) {
                    return (value && value.length > 0);
                }
            },
           ]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Computed property full</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vcfull</Shortcut>
            <Description>Computed property with getter and setter members</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the prop</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        ^name^: {         
            get() {
                let result  = null; 
                //TODO: update result
                return result;
            },
            set(newVal) {
                //TODO: Set property values by parsing newVal argument
                ^end^
            }
          },]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Computed property</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vc</Shortcut>
            <Description>Code snippet for computed property</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the computed property</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        computed: { 
            ^name^() {
                ^end^
            }
          },]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Watch property with a method</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vw</Shortcut>
            <Description>Code snippet for watch property and a method</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the method</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        watch: { 
            ^name^(newVal, oldVal) {
                ^end^
            }
          },]]>
            </Code>
        </Snippet>
    </CodeSnippet>



    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Watch method</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vwm</Shortcut>
            <Description>Code snippet for watch method</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the method</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
            ^name^(newVal, oldVal) {
                ^end^
            },]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Render function - functional</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vrf</Shortcut>
            <Description>Render function for functional a component</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the method</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
            render: function (createElement, context) {
                        let el = createElement(/*TODO:*/);
                        return el;
                        ^end^
                    } ,]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>EventBus pattern</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>veventbus</Shortcut>
            <Description>Code snippet for EventBus</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the method</ToolTip>
                    <Default>name</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
                //TODO: this goes into eventBus.js
                
                import Vue from "vue";

                export const EventBus = new Vue();

                /* Usage
                import {EventBus} from "@/eventBus";
                //raise event
                EventBus.$emit("namespace.event", eventPayload, ...args);
                //handle event
                EventBus.$on("namespace.event", (x) => {});
                */

]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Main file for CLI project</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vmain</Shortcut>
            <Description>Application initialization snippet - Vue CLI</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The id of the element to host vue application</ToolTip>
                    <Default>app</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
                //TODO: this goes into main.js
                
                import Vue from "vue";
                //import "./autoreg";
                import App from "@/App.vue";

                Vue.config.productionTip = false;

                new Vue({
                  render: h => h(App)
                }).$mount("#^name^");
                ^end^

]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    
    <!--Store Pattern-->
    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Store pattern script</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vstore</Shortcut>
            <Description>Script implementing store pattern</Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
                //TODO: this goes into store.js anywhere you like
                
                export const store = {
                      state: {
                        todos: []
                      },
                      addTodo: function(todo) {
                        this.state.todos.push(todo)
                      }
                    };
                    
                //Usage: place below code wherever you want to use the store
                // import {store} from "@/store"; //store.js on the root directory
                // ... in one of the methods
                // store.addTodo(...);
                //
                  
                ^end^

]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Auto register components script</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vautoreg</Shortcut>
            <Description>
                Script for registering all components in /components/* globally with Vue.
                Import this script file in main.js so that you don't have to import
                each component while using it.
            </Description>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>prefix</ID>
                    <ToolTip>The prefix of the component files to register automatically</ToolTip>
                    <Default>app</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[           
        //TODO: this goes into autoreg.js where main.js resides
        //Usage: import "./autoreg";     //in main.js file or in App.vue
        
        import Vue from "vue";
        import upperFirst from "lodash/upperFirst";
        import camelCase from "lodash/camelCase";


        const requireComponent = require.context(
          // The relative path of the components folder
          "./components",
          // Whether or not to look in subfolders
          true,
          // The regular expression used to match base component filenames
          // Ther prefix could be your company abbreviation
          /^prefix^[A-Z]\w+\.(vue|js)$/,
        );

        requireComponent.keys().forEach((fileName) => {

          // Get component config
          const componentConfig = requireComponent(fileName);

          // Get PascalCase name of component
          const componentName = upperFirst(
            camelCase(
              // Gets the file name regardless of folder depth
              fileName
              .split("/")
              .pop()
              .replace(/\.\w+$/, ""),
            ),
          );

          //console.log('Registering component: ', componentName);

          // Register component globally
          Vue.component(
            componentName,
            // Look for the component options on `.default`, which will
            // exist if the component was exported with `export default`,
            // otherwise fall back to module's root.
            componentConfig.default || componentConfig,
          );
        });

                ^end^

]]>
            </Code>
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Scaffold SFC Script</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vcomponent</Shortcut>
            <Description>Code snippet to scaffold component script</Description>
            <SnippetTypes >
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>name</ID>
                    <ToolTip>The name of the component</ToolTip>
                    <Default>my-component</Default>
                </Literal>
            </Declarations>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[
            
  //imports
  //import mxin1 from '@/mixins/mixin1';
  
  //exports
  export default {
    name: '^name^',
    //mixins:[mxin1],
    props: { context: Object },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false
        //define data() properties here ...
        ^end^
      }
    },
    computed: {
      //
    },
    methods: {
      //
    },
    watch: {
      isBusy(newVal, oldVal) {
        //show or hide busy indicator
      }
    },

    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      //
    },
    created() {
      //
    },
    beforeMount() {
      //
    },
    mounted() {
      //
    },
    beforeUpdate() {
      //
    },
    updated() {
      /*
      this.$nextTick(function () {
        // Code that will run only after the
        // entire view has been re-rendered
      });
      */
    },
    /*
    activated() {
      //
    },
    deactivated() {
      //
    },

    beforeDestroy() {
      //
    },
    destroyed() {
      //
    },
    errorCaptured() {
      console.log(...arguments);
      return false;
    }
    */
  }
]]>
            </Code>
        </Snippet>
    </CodeSnippet>


    <CodeSnippet Format="1.1.0" >
        <Header>
            <Title>Life-cycle hooks</Title>
            <Author>Sridhar Nathani</Author>
            <Shortcut>vlch</Shortcut>
            <Description>Vue component life-cycle hooks</Description>
            <SnippetTypes >
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="JavaScript" Kind="any" Delimiter="^">
                <![CDATA[
            
        //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
        beforeCreate() {
          //
        },
        created() {
          //
        },
        beforeMount() {
          //
        },
        mounted() {
          //
        },
        beforeUpdate() {
          //
        },
        updated() {
          /*
          this.$nextTick(function () {
            // Code that will run only after the
            // entire view has been re-rendered
          });
          */^end^
        },
    
        activated() {
          //
        },
        deactivated() {
          //
        },

        beforeDestroy() {
          //
        },
        destroyed() {
          //
        },
        errorCaptured() {
          console.log(...arguments);
          return false;
        }
   
  
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
