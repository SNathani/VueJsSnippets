<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets >
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Scaffold an index file for rollup entries</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vindex</Shortcut>
      <Description>Code snippet to scaffold an index.js file contents</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript"
            Kind="file" Delimiter="^">
        <![CDATA[
  //Suggestion: File name should be index.js
  //imports
  import ClassName from './ClassName';
  //import ClassName2 from './ClassName2';
  
  //exports
   export  {
    ClassName
    //, ClassName2, ...
 }
 
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Scaffold a mixin</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vmixin</Shortcut>
      <Description>Code snippet to scaffold a mixin to be used in the component's mixins array</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the mixin for logging purposes</ToolTip>
          <Default>mixin1</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript"
            Kind="file" Delimiter="^">
        <![CDATA[
  //
  //Mixin Name: ^name^
  //
  
  //imports
  
  //exports
  export default {
    props: { 
        context: Object
      //TODO: declare common props
      ^end^
    },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false,
        hasInitialized: false
        
        //define common properties here ...
      }
    },
    computed: {
      //TODO: Common computed properties goes here ...
    },
    methods: {
      //TODO: Common methods goes here ...
    }
    
    /*
     , 
    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      this.isBusy = true;
      console.log("^name^.beforeCreate() ...");
    },
    created() {
      console.log("^name^.created() ...");
    },
    beforeMount() {
      console.log("^name^.beforeMount() ...");
    },
    mounted() {
      this.hasInitialized = true;
      console.log("^name^.mounted() ...");
    },
    beforeUpdate() {
      console.log("^name^.beforeUpdate() ...");
    },
    updated() {
      console.log("^name^.updated() ...");
    },
    activated() {
      console.log("^name^.activated() ...");      
    },
    deactivated(){
      console.log("^name^.deactivated() ...");
    }
    */
  }
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Scaffold a class</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vmodel</Shortcut>
      <Description>Code snippet to scaffold a model class</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the model class</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript"
            Kind="file" Delimiter="^">
        <![CDATA[
  //
  //Model Class Name: ^name^
  //
  
  //imports
  
  //exports
   export default class ^name^ {
   constructor() {
     //this.name = null;
   }
 }
 
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--FILTER-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Create a global filter</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vfilg</Shortcut>
      <Description>Code snippet for a global filter</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the filter</ToolTip>
          <Default>my-filter</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        Vue.filter('^name^', function (value) {
          if (!value) return '';
          let result = value;
          //TODO: transform value
          //result = ^end^;
          return result;
        });
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--DIRECTIVE-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Create a global custom directive</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vdirg</Shortcut>
      <Description>Code snippet for a global directive</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the directive</ToolTip>
          <Default>my-directive</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        Vue.directive('^name^', {
          bind: function (el, binding, vnode, oldNode) {
           //Called only once, when the directive is first bound to the element. 
           //This is where you can do one-time setup work.
           ^end^
          },
          inserted: function (el, binding, vnode, oldNode) {
            //When the bound element is inserted into the DOM...
            
          },
          componentUpdated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode and the VNodes of 
            //its children have updated.
            
          },
          updated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode has updated, but possibly before its children have updated. 
            //The directive’s value may or may not have changed, 
            // but you can skip unnecessary updates by comparing the binding’s 
            // current and old values (see below on hook arguments).
          
          }
        });
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--DIRECTIVE FN-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Create a global custom directive - function shorthand</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vdirgfn</Shortcut>
      <Description>Code snippet for a global directive - function shorthand</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the directive</ToolTip>
          <Default>my-directive</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        Vue.directive('^name^', function(el, binding, vnode, oldNode) {
            //TODO: Common functionality for bind and update hooks
            ^end^
        });
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Scaffold an instance method data</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vdata</Shortcut>
      <Description>Code snippet for data method</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[

    , data() {
      let vm = this;

      //public interface
      return {
        //define instance properties here ...
      }
    },^end^

]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--FILTER-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Create a local filter</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vfil</Shortcut>
      <Description>Code snippet for a local filter</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the filter</ToolTip>
          <Default>my-filter</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
      filters: {
      ^name^: function (value) {
        if (!value) return '';
        let result = value;
        //TODO: Transform value
        //result = ^end^;
        return result;
      }
     }
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--DIRECTIVE-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Create a local custom directive</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vdir</Shortcut>
      <Description>Code snippet for a local directive</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the directive</ToolTip>
          <Default>my-directive</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[  
    directives: {
      ^name^: {
            bind: function (el, binding, vnode, oldNode) {
            //Called only once, when the directive is first bound to the element. 
            //This is where you can do one-time setup work.
            ^end^
            },
            inserted: function (el, binding, vnode, oldNode) {
            //When the bound element is inserted into the DOM...
            
            },
            componentUpdated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode and the VNodes of 
            //its children have updated.
            
            },
            updated: function(el, binding, vnode, oldNode) {
            //Called after the containing component’s VNode has updated, but possibly before its children have updated. 
            //The directive’s value may or may not have changed, 
            // but you can skip unnecessary updates by comparing the binding’s 
            // current and old values (see below on hook arguments).
          
            }    
          }
    }
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--Version: 1.0.1-->

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>props property</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vprops</Shortcut>
      <Description>Code snippet for props property</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the prop</ToolTip>
          <Default>context</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        props: { ^name^: Object },^end^]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Declare a props property</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vprop</Shortcut>
      <Description>Code snippet for props property declaration</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the prop</ToolTip>
          <Default>context</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
                ^name^: Object ,
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Declare a props property with full definition</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vpropfull</Shortcut>
      <Description>Code snippet for props property full declaration with validation</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the prop</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
 
              ^name^: {
                type: String, //[String, Number]
                required: true,
                default: function() {
                    return null;
                },
                validator: function(value) {
                    return (value && value.length > 0);
                }
            },
           ]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Computed property full</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcfull</Shortcut>
      <Description>Computed property with getter and setter members</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the prop</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        ^name^: {         
            get() {
                let result  = null; 
                //TODO: update result
                return result;
            },
            set(newVal) {
                //TODO: Set property values by parsing newVal argument
                ^end^
            }
          },]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Computed property</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vc</Shortcut>
      <Description>Code snippet for computed property</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the computed property</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        computed: { 
            ^name^() {
                ^end^
            }
          },]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Watch property with a method</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vw</Shortcut>
      <Description>Code snippet for watch property and a method</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the method</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        watch: { 
            ^name^(newVal, oldVal) {
                ^end^
            }
          },]]>
      </Code>
    </Snippet>
  </CodeSnippet>



  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Watch method</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vwm</Shortcut>
      <Description>Code snippet for watch method</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the method</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
            ^name^(newVal, oldVal) {
                ^end^
            },]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Render function - functional</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrf</Shortcut>
      <Description>Render function for functional a component</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the method</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
            render: function (createElement, context) {
                        let el = createElement(/*TODO:*/);
                        return el;
                        ^end^
                    } ,]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>EventBus pattern</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>veventbus</Shortcut>
      <Description>Code snippet for EventBus</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the method</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
                //TODO: this goes into eventBus.js
                
                import Vue from "vue";

                export const EventBus = new Vue();

                /* Usage
                import {EventBus} from "@/eventBus";
                //raise event
                EventBus.$emit("namespace.event", eventPayload, ...args);
                //handle event
                EventBus.$on("namespace.event", (x) => {});
                */

]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Main file for CLI project</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vmain</Shortcut>
      <Description>Application initialization snippet - Vue CLI</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The id of the element to host vue application</ToolTip>
          <Default>app</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
                //TODO: this goes into main.js
                
                import Vue from "vue";
                //import "./autoreg";
                import App from "@/App.vue";

                Vue.config.productionTip = false;

                new Vue({
                  render: h => h(App)
                }).$mount("#^name^");
                ^end^

]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--Store Pattern-->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Store pattern script</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vstore</Shortcut>
      <Description>Script implementing store pattern</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
                //TODO: this goes into store.js anywhere you like
                
                export const store = {
                      state: {
                        todos: []
                      },
                      addTodo: function(todo) {
                        this.state.todos.push(todo)
                      }
                    };
                    
                //Usage: place below code wherever you want to use the store
                // import {store} from "@/store"; //store.js on the root directory
                // ... in one of the methods
                // store.addTodo(...);
                //
                  
                ^end^

]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Auto register components script</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vautoreg</Shortcut>
      <Description>
        Script for registering all components in /components/* globally with Vue.
        Import this script file in main.js so that you don't have to import
        each component while using it.
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>prefix</ID>
          <ToolTip>The prefix of the component files to register automatically</ToolTip>
          <Default>app</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[           
        //TODO: this goes into autoreg.js where main.js resides
        //Usage: import "./autoreg";     //in main.js file or in App.vue
        
        import Vue from "vue";
        import upperFirst from "lodash/upperFirst";
        import camelCase from "lodash/camelCase";


        const requireComponent = require.context(
          // The relative path of the components folder
          "./components",
          // Whether or not to look in subfolders
          true,
          // The regular expression used to match base component filenames
          // Ther prefix could be your company abbreviation
          /^prefix^[A-Z]\w+\.(vue|js)$/,
        );

        requireComponent.keys().forEach((fileName) => {

          // Get component config
          const componentConfig = requireComponent(fileName);

          // Get PascalCase name of component
          const componentName = upperFirst(
            camelCase(
              // Gets the file name regardless of folder depth
              fileName
              .split("/")
              .pop()
              .replace(/\.\w+$/, ""),
            ),
          );

          //console.log('Registering component: ', componentName);

          // Register component globally
          Vue.component(
            componentName,
            // Look for the component options on `.default`, which will
            // exist if the component was exported with `export default`,
            // otherwise fall back to module's root.
            componentConfig.default || componentConfig,
          );
        });

                ^end^

]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Scaffold SFC Script</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcomponent</Shortcut>
      <Description>Code snippet to scaffold component script</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the component</ToolTip>
          <Default>my-component</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
            
  //imports
  //import mxin1 from '@/mixins/mixin1';
  
  //exports
  export default {
    name: '^name^',
    //mixins:[mxin1],
    props: { context: Object },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false
        //define data() properties here ...
        ^end^
      }
    },
    computed: {
      //
    },
    methods: {
      //
    },
    watch: {
      isBusy(newVal, oldVal) {
        //show or hide busy indicator
      }
    },

    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      //
    },
    created() {
      //
    },
    beforeMount() {
      //
    },
    mounted() {
      //
    },
    beforeUpdate() {
      //
    },
    updated() {
      /*
      this.$nextTick(function () {
        // Code that will run only after the
        // entire view has been re-rendered
      });
      */
    },
    /*
    activated() {
      //
    },
    deactivated() {
      //
    },

    beforeDestroy() {
      //
    },
    destroyed() {
      //
    },
    errorCaptured() {
      console.log(...arguments);
      return false;
    }
    */
  }
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Life-cycle hooks</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vlch</Shortcut>
      <Description>Vue component life-cycle hooks</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
            
        //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
        beforeCreate() {
          //
        },
        created() {
          //
        },
        beforeMount() {
          //
        },
        mounted() {
          //
        },
        beforeUpdate() {
          //
        },
        updated() {
          /*
          this.$nextTick(function () {
            // Code that will run only after the
            // entire view has been re-rendered
          });
          */^end^
        },
    
        activated() {
          //
        },
        deactivated() {
          //
        },

        beforeDestroy() {
          //
        },
        destroyed() {
          //
        },
        errorCaptured() {
          console.log(...arguments);
          return false;
        }
   
  
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!-- Version 1.0.2 -->

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>render function</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vr</Shortcut>
      <Description>component's render function</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
      render: function (createElement) {
        return createElement(
          'div',              // tag name
          this.data,          // optional data
          this.$slots.default // optional children array
        )
      },^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>createElement short</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcel</Shortcut>
      <Description>createElement definition - short form</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
         //return
        createElement(
          'div',
          {
            props:{},
          },
          
          [/*child components*/ ]
        )^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>createElement full</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcelement</Shortcut>
      <Description>createElement definition</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
         //return
        createElement(
          // {String | Object | Function}
          // An HTML tag name, component options, or async
          // function resolving to one of these. Required.
          'div',

          // {Object}
          // A data object corresponding to the attributes
          // you would use in a template. Optional.
          {
            //TODO: use the snippet vcelementdata
          },
          // {String | Array}
          // Children VNodes, built using `createElement()`,
          // or using strings to get 'text VNodes'. Optional.
          [
           // <!--'Some text comes first.',
           // createElement('h1', 'A headline'),
           // createElement(MyComponent, {
           //   props: {
           //     someProp: 'foobar'
           //   }
           // })-->
          ]
        )^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>createElement data object definition</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcelementdata</Shortcut>
      <Description>Full definition of the data object parameter of createElement(.,/data/,.)</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
        {        
          // Same API as `v-bind:class`, accepting either
          // a string, object, or array of strings and objects.
          class: {
            foo: true,
            bar: false
          },
          // Same API as `v-bind:style`, accepting either
          // a string, object, or array of objects.
          style: {
            color: 'red',
            fontSize: '14px'
          },
          // Normal HTML attributes
          attrs: {
            id: 'foo'
          },
          // Component props
          props: {
            myProp: 'bar'
          },
          // DOM properties
          domProps: {
            innerHTML: 'baz'
          },
          // Event handlers are nested under `on`, though
          // modifiers such as in `v-on:keyup.enter` are not
          // supported. You'll have to manually check the
          // keyCode in the handler instead.
          on: {
            click: this.clickHandler
          },
          // For components only. Allows you to listen to
          // native events, rather than events emitted from
          // the component using `vm.$emit`.
          nativeOn: {
            click: this.nativeClickHandler
          },
          // Custom directives. Note that the `binding`'s
          // `oldValue` cannot be set, as Vue keeps track
          // of it for you.
          directives: [
            {
              name: 'my-custom-directive',
              value: '2',
              expression: '1 + 1',
              arg: 'foo',
              modifiers: {
                bar: true
              }
            }
          ],
          // Scoped slots in the form of
          // { name: props => VNode | Array<VNode> }
          scopedSlots: {
            default: props => createElement('span', props.text)
          },
          // The name of the slot, if this component is the
          // child of another component
          slot: 'name-of-slot',
          // Other special top-level properties
          key: 'myKey',
          ref: 'myRef',
          // If you are applying the same ref name to multiple
          // elements in the render function. This will make `$refs.myRef` become an
          // array
          refInFor: true
        } ^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>create a global functional component</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vfcg</Shortcut>
      <Description>Code snippet to create a global functional component with render function</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the functional component</ToolTip>
          <Default>my-component</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
        Vue.component('^name^', {
          functional: true,
          props: {
            //TODO: define properties
          },
          render: function (createElement, context) {
            let el = 'div';

            return createElement(
              el,
              context.data,
              context.children
            )
          }
        })^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>$emit</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>ve</Shortcut>
      <Description>this.$emit(.,.)</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the event to emit</ToolTip>
          <Default>click</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
        this.$emit('^name^', /*payload*/);^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>$on</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>von</Shortcut>
      <Description>Event handler using this.$on(.,.)</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the event to emit</ToolTip>
          <Default>click</Default>
        </Literal>
        <Literal>
          <ID>callback</ID>
          <ToolTip>The name of the callback or function definition</ToolTip>
          <Default>callback</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
        this.$on('^name^', ^callback^);^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Component model property</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vcmodel</Shortcut>
      <Description>Model property of a component to override the behavior of v-model</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the property to handle</ToolTip>
          <Default>click</Default>
        </Literal>
        <Literal>
          <ID>event</ID>
          <ToolTip>The name of the event to override</ToolTip>
          <Default>click</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
            model: {
                prop: '^name^',
                event: '^event^'
            },^end^
  ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>$listeners override</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vclisteners</Shortcut>
      <Description>Computed listeners property to override listeners on a component</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the computed listerners property</ToolTip>
          <Default>click</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
        ^name^Listeners() {
              var vm = this;
              // `Object.assign` merges objects together to form a new object
              return Object.assign({},
                // We add all the listeners from the parent
                this.$listeners,
                // Then we can add custom listeners or override the
                // behavior of some listeners.
                {
                  // This ensures that the component works with v-model
                  input: function (event) {
                    vm.$emit('input', event.target.value)
                  }
                  //TODO: extend by adding other event handlers
                }
              );
            },^end^
  ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- router.push() -->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Navigate to route programmatically</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrp</Shortcut>
      <Description>Navigate to route programmatically</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>route</ID>
          <ToolTip>Route to navigate to</ToolTip>
          <Default>home</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.push('/^route^');^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- router.push() -->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Navigate to route programmatically using path</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrpo</Shortcut>
      <Description>Navigate to route programmatically using path</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route to navigate to</ToolTip>
          <Default>home</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.push({path: '/^path^'});^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- router.push() -->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Navigate to route programmatically using params</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrpp</Shortcut>
      <Description>Navigate to route programmatically using params</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Route name</ToolTip>
          <Default>home</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.push({ name: '^name^', params: { id: 1 }});^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- router.push() -->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Navigate to route programmatically using a query</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrpq</Shortcut>
      <Description>Navigate to route programmatically using a query</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route path</ToolTip>
          <Default>home</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.push({ path: '/^path^', query: { id: 1 }});^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- router.push() -->
  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Navigate to route programmatically using a hash</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrph</Shortcut>
      <Description>Navigate to route programmatically using a hash</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route path</ToolTip>
          <Default>home</Default>
        </Literal>
        <Literal>
          <ID>hash</ID>
          <ToolTip>Hash name</ToolTip>
          <Default>hash</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.push({ path: '/^path^', hash: '#^hash^' });^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Define routes</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vroutes</Shortcut>
      <Description>Define routes</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
const routes = [
  { path: '/', name: 'home', component: Home , meta: { }},
  { path: '/about', name: 'about', component: About , meta: { }},
  /*
  {
    // /search/screens -> /search?q=screens
    path: '/search/:searchText',
    redirect: to => {
      // the function receives the target route as the argument
      // we return a redirect path/location here.
      return { path: '/search', query: { q: to.params.searchText } }
    },
  },
  { path: '/search' }
  */
  { path: '*', component: NotFound },
];^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Define router</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrouter</Shortcut>
      <Description>Define router</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
const router = VueRouter.createRouter({
  history: VueRouter.createWebHashHistory(), /* createWebHistory() */
  routes, 
  /* strict: true, // applies to all routes */
});^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Use router - app.Use(router)</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vru</Shortcut>
      <Description>Use router - app.Use(router)</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
app.use(router);^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Get route parameter inside a component</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrpget</Shortcut>
      <Description>Get route parameter inside a component</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Name of the parameter</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
this.$route.params.^name^;^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Adds import for router</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vri</Shortcut>
      <Description>Adds import for router</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
import { createRouter, createWebHashHistory, /* createWebHistory */ } from 'vue-router' 
^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Router navigation guard</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrng</Shortcut>
      <Description>Router navigation guard</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.beforeEach((to, from) => {
  // ...
  // explicitly return false to cancel the navigation
  return false
})
^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Router navigation guard snippet verifying whether user is authenticated</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrngauth</Shortcut>
      <Description>Router navigation guard snippet verifying whether user is authenticated</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.beforeEach(async (to, from) => {
  if (
    // make sure the user is authenticated. 
    // Use to.meta to refer to additional information
    !isAuthenticated &&
    // ❗️ Avoid an infinite redirect
    to.name !== 'Login'
  ) {
    // redirect the user to the login page
    return { name: 'Login' }
  }
});

^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Router navigation guard snippet verifying whether user is authenticated using async</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrngauthasync</Shortcut>
      <Description>Router navigation guard snippet verifying whether user is authenticated using aysnc</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
router.beforeEach(async (to, from) => {
  // canUserAccess() returns `true` or `false`
  const canAccess = await canUserAccess(to)
  // redirect to login or access-denied
  if (!canAccess) return '/login'
})
^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Add a route to the routes symbol</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vra</Shortcut>
      <Description>Add a route to the routes symbol</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>component</ID>
          <ToolTip>Component Name</ToolTip>
          <Default>Home</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
{ path: '/^path^', component: ^component^ , meta: { }},
^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Add a named route to the routes symbol</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vran</Shortcut>
      <Description>Add a named route to the routes symbol</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>component</ID>
          <ToolTip>Component Name</ToolTip>
          <Default>Home</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Route name</ToolTip>
          <Default>name</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
{ path: '/^path^', component: ^component^, name: ^name^, meta: { } },
^end^
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.1.0" >
    <Header>
      <Title>Add a route to the routes symbol with nested children</Title>
      <Author>Sridhar Nathani</Author>
      <Shortcut>vrac</Shortcut>
      <Description>Add a route to the routes symbol with nested children</Description>
      <SnippetTypes >
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>component</ID>
          <ToolTip>Component Name</ToolTip>
          <Default>Home</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>Route path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="JavaScript" Kind="any" Delimiter="^">
        <![CDATA[
{ path: '/^path^', component: ^component^, children: [ ^end^ ], meta: { } },
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  
  
</CodeSnippets>